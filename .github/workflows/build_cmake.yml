name: CMake Build Matrix

on: [push, pull_request]

env:
  CMAKE_VERSION: 3.16.2
  NINJA_VERSION: 1.9.0
  BUILD_TYPE: Release
  CCACHE_VERSION: 3.7.7

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Ubuntu Latest GCC", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            cc: "gcc", cxx: "g++"
          }
        - {
            name: "macOS Latest Clang", artifact: "macOS.tar.xz",
            os: macos-latest,
            cc: "clang", cxx: "clang++"
          }
        - {
            name: "Windows Latest MSVC", artifact: "Windows-MSVC.tar.xz",
            os: windows-latest,
            build_type: "Release", cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }

    steps:
    - name: Check variables
      run: echo ${{matrix.os}} ${{matrix.cc}}
    - name: Install Dependencies (Linux)
      run: sudo apt-get -qq install ninja-build swig libeigen3-dev libboost-all-dev
      if: matrix.os == 'ubuntu-latest'
    - name: Install Dependencies (Windows)
      run: choco install ninja
      if: matrix.os == 'windows-latest'
    - name: Install Dependencies (macOS)
      run: brew install ninja swig eigen boost
      if: matrix.os == 'macos-latest'

    - uses: actions/checkout@v1

    - name: Install MSVC Dependencies
      if: matrix.os == 'windows-latest'
      shell: cmake -P {0}
      run: |
          set(msvc_deps_url "https://github.com/openbabel/msvc-dependencies/archive/master.zip")
          file(DOWNLOAD "${msvc_deps}" ./msvc_deps.zip SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./msvc_deps.zip)

    - name: Configure
      run: |
        mkdir "${{ runner.workspace }}/build"
        cd "${{ runner.workspace }}/build"
        cmake $GITHUB_WORKSPACE -GNinja
      shell: bash

    - name: Build
      run: cmake --build .
      working-directory: ${{ runner.workspace }}/build

    - name: Test
      shell: cmake -P {0}
      working-directory: ${{ runner.workspace }}/build
      run: |
        include(ProcessorCount)
        ProcessorCount(N)

        set(ENV{CTEST_OUTPUT_ON_FAILURE} "ON")

        execute_process(
          COMMAND ${{ steps.cmake_and_ninja.outputs.cmake_dir }}/ctest -j ${N}
          WORKING_DIRECTORY build
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Running tests failed!")
        endif()


    - name: Install Strip
      run: ${{ steps.cmake_and_ninja.outputs.cmake_dir }}/cmake --install build --prefix instdir --strip
      working-directory: ${{ runner.workspace }}/build

    - name: Pack
      working-directory: instdir
      run: ${{ steps.cmake_and_ninja.outputs.cmake_dir }}/cmake -E tar cJfv ../${{ matrix.config.artifact }} .

    - name: Upload
      uses: actions/upload-artifact@v1
      with:
        path: ./${{ matrix.config.artifact }}
        name: ${{ matrix.config.artifact }}
